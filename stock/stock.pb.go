// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: stock/stock.proto

package stockpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TimeSeriesRequest_TimeResolution int32

const (
	TimeSeriesRequest_DAILY   TimeSeriesRequest_TimeResolution = 0
	TimeSeriesRequest_WEEKLY  TimeSeriesRequest_TimeResolution = 1
	TimeSeriesRequest_MONTHLY TimeSeriesRequest_TimeResolution = 2
)

// Enum value maps for TimeSeriesRequest_TimeResolution.
var (
	TimeSeriesRequest_TimeResolution_name = map[int32]string{
		0: "DAILY",
		1: "WEEKLY",
		2: "MONTHLY",
	}
	TimeSeriesRequest_TimeResolution_value = map[string]int32{
		"DAILY":   0,
		"WEEKLY":  1,
		"MONTHLY": 2,
	}
)

func (x TimeSeriesRequest_TimeResolution) Enum() *TimeSeriesRequest_TimeResolution {
	p := new(TimeSeriesRequest_TimeResolution)
	*p = x
	return p
}

func (x TimeSeriesRequest_TimeResolution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeSeriesRequest_TimeResolution) Descriptor() protoreflect.EnumDescriptor {
	return file_stock_stock_proto_enumTypes[0].Descriptor()
}

func (TimeSeriesRequest_TimeResolution) Type() protoreflect.EnumType {
	return &file_stock_stock_proto_enumTypes[0]
}

func (x TimeSeriesRequest_TimeResolution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeSeriesRequest_TimeResolution.Descriptor instead.
func (TimeSeriesRequest_TimeResolution) EnumDescriptor() ([]byte, []int) {
	return file_stock_stock_proto_rawDescGZIP(), []int{3, 0}
}

type StockQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *StockQuoteRequest) Reset() {
	*x = StockQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_stock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuoteRequest) ProtoMessage() {}

func (x *StockQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stock_stock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuoteRequest.ProtoReflect.Descriptor instead.
func (*StockQuoteRequest) Descriptor() ([]byte, []int) {
	return file_stock_stock_proto_rawDescGZIP(), []int{0}
}

func (x *StockQuoteRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// TimeSeriesData contians the data returned from the AlphaVantage API
type TimeSeriesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Open   float32 `protobuf:"fixed32,2,opt,name=open,proto3" json:"open,omitempty"`
	High   float32 `protobuf:"fixed32,3,opt,name=high,proto3" json:"high,omitempty"`
	Low    float32 `protobuf:"fixed32,4,opt,name=low,proto3" json:"low,omitempty"`
	Close  float32 `protobuf:"fixed32,5,opt,name=close,proto3" json:"close,omitempty"`
	Volume int64   `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *TimeSeriesData) Reset() {
	*x = TimeSeriesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_stock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesData) ProtoMessage() {}

func (x *TimeSeriesData) ProtoReflect() protoreflect.Message {
	mi := &file_stock_stock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesData.ProtoReflect.Descriptor instead.
func (*TimeSeriesData) Descriptor() ([]byte, []int) {
	return file_stock_stock_proto_rawDescGZIP(), []int{1}
}

func (x *TimeSeriesData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *TimeSeriesData) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *TimeSeriesData) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *TimeSeriesData) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *TimeSeriesData) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *TimeSeriesData) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// StockQuoteResponse returns a single data point for the current stock price
type StockQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol        string          `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Data          *TimeSeriesData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	PreviousClose float32         `protobuf:"fixed32,3,opt,name=previousClose,proto3" json:"previousClose,omitempty"`
}

func (x *StockQuoteResponse) Reset() {
	*x = StockQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_stock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuoteResponse) ProtoMessage() {}

func (x *StockQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stock_stock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuoteResponse.ProtoReflect.Descriptor instead.
func (*StockQuoteResponse) Descriptor() ([]byte, []int) {
	return file_stock_stock_proto_rawDescGZIP(), []int{2}
}

func (x *StockQuoteResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockQuoteResponse) GetData() *TimeSeriesData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StockQuoteResponse) GetPreviousClose() float32 {
	if x != nil {
		return x.PreviousClose
	}
	return 0
}

// TimeSeriers RPC Request definition
type TimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *TimeSeriesRequest) Reset() {
	*x = TimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_stock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesRequest) ProtoMessage() {}

func (x *TimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stock_stock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*TimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_stock_stock_proto_rawDescGZIP(), []int{3}
}

func (x *TimeSeriesRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// TimeSeriesResponse returns the symbol name and returns a
// repeated TimeSeriesData property
type TimeSeriesResponseStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TimeSeriesData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TimeSeriesResponseStream) Reset() {
	*x = TimeSeriesResponseStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_stock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesResponseStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesResponseStream) ProtoMessage() {}

func (x *TimeSeriesResponseStream) ProtoReflect() protoreflect.Message {
	mi := &file_stock_stock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesResponseStream.ProtoReflect.Descriptor instead.
func (*TimeSeriesResponseStream) Descriptor() ([]byte, []int) {
	return file_stock_stock_proto_rawDescGZIP(), []int{4}
}

func (x *TimeSeriesResponseStream) GetData() *TimeSeriesData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TimeSeriesData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TimeSeriesResponse) Reset() {
	*x = TimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_stock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesResponse) ProtoMessage() {}

func (x *TimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stock_stock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*TimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_stock_stock_proto_rawDescGZIP(), []int{5}
}

func (x *TimeSeriesResponse) GetData() []*TimeSeriesData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_stock_stock_proto protoreflect.FileDescriptor

var file_stock_stock_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x22, 0x34, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x02, 0x22, 0x45, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3f, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0xee, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30,
	0x01, 0x42, 0x09, 0x5a, 0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stock_stock_proto_rawDescOnce sync.Once
	file_stock_stock_proto_rawDescData = file_stock_stock_proto_rawDesc
)

func file_stock_stock_proto_rawDescGZIP() []byte {
	file_stock_stock_proto_rawDescOnce.Do(func() {
		file_stock_stock_proto_rawDescData = protoimpl.X.CompressGZIP(file_stock_stock_proto_rawDescData)
	})
	return file_stock_stock_proto_rawDescData
}

var file_stock_stock_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_stock_stock_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_stock_stock_proto_goTypes = []interface{}{
	(TimeSeriesRequest_TimeResolution)(0), // 0: quote.TimeSeriesRequest.TimeResolution
	(*StockQuoteRequest)(nil),             // 1: quote.StockQuoteRequest
	(*TimeSeriesData)(nil),                // 2: quote.TimeSeriesData
	(*StockQuoteResponse)(nil),            // 3: quote.StockQuoteResponse
	(*TimeSeriesRequest)(nil),             // 4: quote.TimeSeriesRequest
	(*TimeSeriesResponseStream)(nil),      // 5: quote.TimeSeriesResponseStream
	(*TimeSeriesResponse)(nil),            // 6: quote.TimeSeriesResponse
}
var file_stock_stock_proto_depIdxs = []int32{
	2, // 0: quote.StockQuoteResponse.data:type_name -> quote.TimeSeriesData
	2, // 1: quote.TimeSeriesResponseStream.data:type_name -> quote.TimeSeriesData
	2, // 2: quote.TimeSeriesResponse.data:type_name -> quote.TimeSeriesData
	1, // 3: quote.StockService.Quote:input_type -> quote.StockQuoteRequest
	4, // 4: quote.StockService.GetTimeSeriesData:input_type -> quote.TimeSeriesRequest
	4, // 5: quote.StockService.GetTimeSeriesDataStream:input_type -> quote.TimeSeriesRequest
	3, // 6: quote.StockService.Quote:output_type -> quote.StockQuoteResponse
	6, // 7: quote.StockService.GetTimeSeriesData:output_type -> quote.TimeSeriesResponse
	5, // 8: quote.StockService.GetTimeSeriesDataStream:output_type -> quote.TimeSeriesResponseStream
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_stock_stock_proto_init() }
func file_stock_stock_proto_init() {
	if File_stock_stock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stock_stock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_stock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_stock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_stock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_stock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesResponseStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_stock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stock_stock_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stock_stock_proto_goTypes,
		DependencyIndexes: file_stock_stock_proto_depIdxs,
		EnumInfos:         file_stock_stock_proto_enumTypes,
		MessageInfos:      file_stock_stock_proto_msgTypes,
	}.Build()
	File_stock_stock_proto = out.File
	file_stock_stock_proto_rawDesc = nil
	file_stock_stock_proto_goTypes = nil
	file_stock_stock_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StockServiceClient interface {
	Quote(ctx context.Context, in *StockQuoteRequest, opts ...grpc.CallOption) (*StockQuoteResponse, error)
	GetTimeSeriesData(ctx context.Context, in *TimeSeriesRequest, opts ...grpc.CallOption) (*TimeSeriesResponse, error)
	GetTimeSeriesDataStream(ctx context.Context, in *TimeSeriesRequest, opts ...grpc.CallOption) (StockService_GetTimeSeriesDataStreamClient, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) Quote(ctx context.Context, in *StockQuoteRequest, opts ...grpc.CallOption) (*StockQuoteResponse, error) {
	out := new(StockQuoteResponse)
	err := c.cc.Invoke(ctx, "/quote.StockService/Quote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetTimeSeriesData(ctx context.Context, in *TimeSeriesRequest, opts ...grpc.CallOption) (*TimeSeriesResponse, error) {
	out := new(TimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/quote.StockService/GetTimeSeriesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetTimeSeriesDataStream(ctx context.Context, in *TimeSeriesRequest, opts ...grpc.CallOption) (StockService_GetTimeSeriesDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StockService_serviceDesc.Streams[0], "/quote.StockService/GetTimeSeriesDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceGetTimeSeriesDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockService_GetTimeSeriesDataStreamClient interface {
	Recv() (*TimeSeriesResponseStream, error)
	grpc.ClientStream
}

type stockServiceGetTimeSeriesDataStreamClient struct {
	grpc.ClientStream
}

func (x *stockServiceGetTimeSeriesDataStreamClient) Recv() (*TimeSeriesResponseStream, error) {
	m := new(TimeSeriesResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockServiceServer is the server API for StockService service.
type StockServiceServer interface {
	Quote(context.Context, *StockQuoteRequest) (*StockQuoteResponse, error)
	GetTimeSeriesData(context.Context, *TimeSeriesRequest) (*TimeSeriesResponse, error)
	GetTimeSeriesDataStream(*TimeSeriesRequest, StockService_GetTimeSeriesDataStreamServer) error
}

// UnimplementedStockServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (*UnimplementedStockServiceServer) Quote(context.Context, *StockQuoteRequest) (*StockQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quote not implemented")
}
func (*UnimplementedStockServiceServer) GetTimeSeriesData(context.Context, *TimeSeriesRequest) (*TimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeSeriesData not implemented")
}
func (*UnimplementedStockServiceServer) GetTimeSeriesDataStream(*TimeSeriesRequest, StockService_GetTimeSeriesDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTimeSeriesDataStream not implemented")
}

func RegisterStockServiceServer(s *grpc.Server, srv StockServiceServer) {
	s.RegisterService(&_StockService_serviceDesc, srv)
}

func _StockService_Quote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).Quote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quote.StockService/Quote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).Quote(ctx, req.(*StockQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetTimeSeriesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetTimeSeriesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quote.StockService/GetTimeSeriesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetTimeSeriesData(ctx, req.(*TimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetTimeSeriesDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimeSeriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServiceServer).GetTimeSeriesDataStream(m, &stockServiceGetTimeSeriesDataStreamServer{stream})
}

type StockService_GetTimeSeriesDataStreamServer interface {
	Send(*TimeSeriesResponseStream) error
	grpc.ServerStream
}

type stockServiceGetTimeSeriesDataStreamServer struct {
	grpc.ServerStream
}

func (x *stockServiceGetTimeSeriesDataStreamServer) Send(m *TimeSeriesResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

var _StockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quote.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Quote",
			Handler:    _StockService_Quote_Handler,
		},
		{
			MethodName: "GetTimeSeriesData",
			Handler:    _StockService_GetTimeSeriesData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTimeSeriesDataStream",
			Handler:       _StockService_GetTimeSeriesDataStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stock/stock.proto",
}
